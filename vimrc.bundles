if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
Plug 'christoomey/vim-run-interactive'

Plug 'pangloss/vim-javascript'
Plug 'pbrisbin/vim-mkdir'
Plug 'slim-template/vim-slim'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/tComment'

" Rust
Plug 'rust-lang/rust.vim'
let g:rustfmt_autosave = 1

" Vim sneak for faster locomotion
Plug 'justinmk/vim-sneak'

" Themes
Plug 'rakr/vim-one'
Plug 'rakr/vim-two-firewatch'
Plug 'ayu-theme/ayu-vim'
Plug 'axvr/photon.vim'
Plug 'embark-theme/vim', { 'as': 'embark', 'branch': 'main' }
Plug 'mhartington/oceanic-next'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'jacoborus/tender.vim'
Plug 'jaredgorski/spacecamp'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'frenzyexists/aquarium-vim', { 'branch': 'develop' }

" Use the golden ratio for auto sizing windows when jumping between them
Plug 'roman/golden-ratio'

" Git gutter
Plug 'airblade/vim-gitgutter'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" TOML
Plug 'cespare/vim-toml', { 'branch': 'main' }

" Typescript and JSX
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

" Liquid
Plug 'tpope/vim-liquid'

" Auto insert matching "bracket" characters
Plug 'jiangmiao/auto-pairs'

" Split single line args into multiline
Plug 'AndrewRadev/splitjoin.vim'

" Emmet style tag generation in vim
Plug 'mattn/emmet-vim'

function! s:SourceConfigFilesIn(directory)
  let directory_splat = '~/.vim/' . a:directory . '/*'

  for config_file in split(glob(directory_splat), '\n')
    if filereadable(config_file)
      execute 'source' config_file
    endif
  endfor
endfunction

call s:SourceConfigFilesIn('rcplugins')

call plug#end()
